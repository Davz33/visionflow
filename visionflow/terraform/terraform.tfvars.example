# VisionFlow Terraform Configuration
# Copy this file to terraform.tfvars and update the values

# Project Configuration
project_id = "visionflow-gcp-project"  # Replace with your GCP project ID
region     = "us-central1"
zone       = "us-central1-a"
environment = "prod"  # dev, staging, prod

# Domain Configuration
domain = "visionflow.ai"  # Replace with your domain

# Network Configuration
vpc_name = "visionflow-vpc"
subnet_name = "visionflow-subnet"
subnet_cidr = "10.0.0.0/24"

# Secondary ranges for GKE
secondary_ranges = {
  pods = {
    range_name    = "pods"
    ip_cidr_range = "10.1.0.0/16"
  }
  services = {
    range_name    = "services"
    ip_cidr_range = "10.2.0.0/16"
  }
}

# GKE Configuration
cluster_name = "visionflow-cluster"

# Node pool configurations
node_pools = {
  default = {
    machine_type     = "e2-standard-4"
    min_count       = 1
    max_count       = 5
    disk_size_gb    = 50
    disk_type       = "pd-standard"
    image_type      = "COS_CONTAINERD"
    auto_repair     = true
    auto_upgrade    = true
    preemptible     = false
  }
  
  cpu-intensive = {
    machine_type     = "c2-standard-8"
    min_count       = 0
    max_count       = 3
    disk_size_gb    = 100
    disk_type       = "pd-ssd"
    image_type      = "COS_CONTAINERD"
    auto_repair     = true
    auto_upgrade    = true
    preemptible     = false
    labels = {
      workload = "cpu-intensive"
    }
  }
  
  gpu = {
    machine_type      = "n1-standard-4"
    min_count        = 0
    max_count        = 3
    disk_size_gb     = 100
    disk_type        = "pd-ssd"
    image_type       = "COS_CONTAINERD"
    auto_repair      = true
    auto_upgrade     = true
    preemptible      = true
    accelerator_type = "nvidia-tesla-t4"
    accelerator_count = 1
    taints = [{
      key    = "nvidia.com/gpu"
      value  = "true"
      effect = "NO_SCHEDULE"
    }]
    labels = {
      workload = "gpu"
    }
  }
}

# Storage Configuration
media_bucket_name     = "visionflow-media-bucket"
mlflow_bucket_name    = "visionflow-mlflow-artifacts"
terraform_bucket_name = "visionflow-terraform-state"

# Database Configuration
postgres_instance_name = "visionflow-postgres"
postgres_version      = "POSTGRES_15"
postgres_tier         = "db-f1-micro"  # Adjust based on workload

redis_instance_name = "visionflow-redis"
redis_memory_size   = 1
redis_version       = "REDIS_7_0"

# Secrets Configuration (update these values!)
secrets = {
  langchain-api-key = {
    secret_data = "your-langchain-api-key-here"
    labels = {
      service = "orchestration"
    }
  }
  openai-api-key = {
    secret_data = "your-openai-api-key-here"
    labels = {
      service = "ai"
    }
  }
  huggingface-token = {
    secret_data = "your-huggingface-token-here"
    labels = {
      service = "ai"
    }
  }
  postgres-password = {
    secret_data = "your-secure-postgres-password"
    labels = {
      service = "database"
    }
  }
  redis-password = {
    secret_data = "your-secure-redis-password"
    labels = {
      service = "cache"
    }
  }
  mlflow-auth = {
    secret_data = "mlflow:your-secure-mlflow-password"
    labels = {
      service = "mlflow"
    }
  }
}

# Monitoring Configuration
notification_channels = [
  {
    display_name = "VisionFlow Email Alerts"
    type         = "email"
    labels = {
      email_address = "alerts@yourdomain.com"  # Replace with your email
    }
    user_labels = {
      service = "visionflow"
    }
  },
  {
    display_name = "VisionFlow Slack Alerts"
    type         = "slack"
    labels = {
      channel_name = "#visionflow-alerts"
      url          = "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"  # Replace with your Slack webhook
    }
    user_labels = {
      service = "visionflow"
    }
  }
]

# Labels
default_labels = {
  project     = "visionflow"
  environment = "prod"
  managed_by  = "terraform"
  team        = "platform"
}
