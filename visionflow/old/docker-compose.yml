services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: visionflow-postgres
    environment:
      POSTGRES_DB: visionflow
      POSTGRES_USER: visionflow
      POSTGRES_PASSWORD: visionflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U visionflow"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped


  # Redis Cache and Queue
  redis:
    image: redis:7-alpine
    container_name: visionflow-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped


  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: visionflow-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: visionflow-api
    environment:
      - ENVIRONMENT=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=visionflow
      - DB_USER=visionflow
      - DB_PASSWORD=visionflow
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - STORAGE_ENDPOINT=minio:9000
      - STORAGE_ACCESS_KEY=minio
      - STORAGE_SECRET_KEY=minio123
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=info
      - HF_HOME=/home/app/.cache/huggingface
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./cache/huggingface:/home/app/.cache/huggingface
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Video Generation Service (CPU-only)
  generation-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: visionflow-generation
    command: python -m visionflow.services.generation.standalone_service
    environment:
      - ENVIRONMENT=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=visionflow
      - DB_USER=visionflow
      - DB_PASSWORD=visionflow
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MODEL_DEVICE=mps  # M4 Max optimization!
      - MODEL_CACHE_DIR=/app/models
      - MAX_CONCURRENT_GENERATIONS=1
      - PYTORCH_ENABLE_MPS_FALLBACK=1  # M4 Max support
      - HUGGINGFACE_TOKEN=hf_YOUR_HUGGINGFACE_TOKEN_HERE
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./models:/app/models
      - ./generated:/app/generated
      - ./logs:/app/logs
    restart: unless-stopped

  # Celery Worker for Async Tasks
  celery-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: visionflow-worker
    command: celery -A visionflow.worker worker --loglevel=info --concurrency=2
    environment:
      - ENVIRONMENT=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=visionflow
      - DB_USER=visionflow
      - DB_PASSWORD=visionflow
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - STORAGE_ENDPOINT=minio:9000
      - STORAGE_ACCESS_KEY=minio
      - STORAGE_SECRET_KEY=minio123
      - HF_HOME=/home/app/.cache/huggingface
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./cache/huggingface:/home/app/.cache/huggingface
    restart: unless-stopped

  # Celery Beat Scheduler for Periodic Tasks (Fine-tuning triggers)
  celery-beat:
    build:
      context: .
      dockerfile: docker/Dockerfile.api.optimized
    container_name: visionflow-beat
    command: celery -A visionflow.worker beat --loglevel=info --pidfile=/tmp/celerybeat.pid --schedule=/tmp/celerybeat-schedule
    environment:
      - ENVIRONMENT=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=visionflow
      - DB_USER=visionflow
      - DB_PASSWORD=visionflow
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - STORAGE_ENDPOINT=minio:9000
      - STORAGE_ACCESS_KEY=minio
      - STORAGE_SECRET_KEY=minio123
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - celery-beat-data:/tmp  # Persistent volume for celery beat schedule
    restart: unless-stopped

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: visionflow-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: visionflow-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  celery-beat-data:
    driver: local
