version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: visionflow-postgres
    environment:
      POSTGRES_DB: visionflow
      POSTGRES_USER: visionflow_user
      POSTGRES_PASSWORD: visionflow_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U visionflow_user -d visionflow"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and task queues
  redis:
    image: redis:7-alpine
    container_name: visionflow-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # VisionFlow API Service
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: visionflow-api
    environment:
      # Database configuration
      DATABASE_URL: postgresql://visionflow_user:visionflow_pass@postgres:5432/visionflow
      
      # Redis configuration
      REDIS_URL: redis://redis:6379/0
      
      # Evaluation configuration
      ENABLE_PRODUCTION_MODELS: "true"
      ENABLE_LIGHTWEIGHT_MODE: "false"
      MAX_FRAMES_PER_VIDEO: "20"
      SAMPLING_STRATEGY: "adaptive"
      
      # GPU/Device configuration
      CUDA_VISIBLE_DEVICES: "0"
      TORCH_DEVICE: "cuda"
      
      # Resource limits
      WAN_GPU_MEMORY_FRACTION: "0.8"
      WAN_MAX_SYSTEM_RAM_GB: "16.0"
      
      # Monitoring
      ENABLE_PROMETHEUS: "true"
      LOG_LEVEL: "info"
    
    ports:
      - "8000:8000"
    
    volumes:
      - ./generated:/app/generated
      - ./models:/app/models
      - ./logs:/app/logs
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    restart: unless-stopped
    
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Evaluation Worker (for background processing)
  evaluation-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.evaluation-worker
    container_name: visionflow-evaluation-worker
    environment:
      # Database configuration
      DATABASE_URL: postgresql://visionflow_user:visionflow_pass@postgres:5432/visionflow
      
      # Redis configuration
      REDIS_URL: redis://redis:6379/0
      
      # Worker configuration
      CELERY_WORKER_CONCURRENCY: "2"
      CELERY_WORKER_PREFETCH: "1"
      
      # Model configuration
      ENABLE_PRODUCTION_MODELS: "true"
      TORCH_DEVICE: "cuda"
      
    volumes:
      - ./generated:/app/generated
      - ./models:/app/models
      - ./logs:/app/logs
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    restart: unless-stopped
    
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: visionflow-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: visionflow-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: visionflow-production
